@inject Microsoft.Extensions.Localization.IStringLocalizer<StockAnomalyJustifDialog> _localizer
@using Uni.Scan.Client.Infrastructure.ApiClients
@using Uni.Scan.Transfer.DataModel;

<style>
    .mud-dialog-title {
        background: #e6f1f8;
        border-bottom: solid 3px #74bdf0;
    }

    .footerbar {
        border-top: solid 1px #4e85c4ff;
        background: #f0f9f1 !important;
    }
</style>

@if (AnomalyStat.Equals("Justif"))
{
    <EditForm Model="@stockanomalyDTO" OnValidSubmit="@(() => ValidateAnomaly(Id))">
        <FluentValidationValidator @ref="_fluentValidationValidator" />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Check" Class="mr-3 mb-n1" />
                    @_localizer["Justification"]
                </MudText>
            </TitleContent>
            <DialogContent>

                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" Lines="5" For="@(() => stockanomalyDTO.AnomalyReason)" @bind-Value="@stockanomalyDTO.AnomalyReason" Label="@Localizer["Raison"]" />
                </MudItem>


            </DialogContent>
            <DialogActions>
                <MudButton Style="width:100%" Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => RejectAnomaly(Id))">@Localizer["Rejeter"]</MudButton>
                <MudButton Style="width:100%" Color="Color.Success" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="@(!Validated)">@Localizer["Clôturer"]</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}
else if (AnomalyStat.Equals("Cancel"))
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Close" Class="mr-3 mb-n1" />
                @Localizer["Annulation"]
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudText> Êtes-vous sûr de bien vouloir annuler cette Anomalie ?</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton Style="width:100%" OnClick="Cancel">@Localizer["Non"]</MudButton>
            <MudButton Style="width:100%" Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => CancelAnomaly(Id))">@Localizer["Annuler"]</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {

    [Inject] private IStockAnomalyClient anomalyClient { get; set; }
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter] public StockAnomalyDTO stockanomalyDTO { get; set; } = new();
    [Parameter] public int Id { get; set; }
    [Parameter] public string AnomalyStat { get; set; }

    private List<StockAnomalyDTO> _stockanomalyDTO { get; set; } = new();

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

    }
    private async Task LoadDataAsync()
    {
        await Task.CompletedTask;
    }
    private void Cancel()
    {
        stockanomalyDTO.AnomalyStatus = AnomalyStatus.Rejeté;
        MudDialog.Cancel();
    }

    private async Task ValidateAnomaly(int id)
    {
        stockanomalyDTO.Id = id;
        var response = await anomalyClient.ValidateAsync(stockanomalyDTO);
        if (response.Succeeded)
        {
            _snackBar.Add($"Anomalie Traitée", Severity.Info);
            MudDialog.Close();

        }
        else
        {
            _snackBar.Add($"une erreur est survenue ", Severity.Error);
        }

    }
    private async Task RejectAnomaly(int id)
    {
        stockanomalyDTO.Id = id;
        var response = await anomalyClient.RejectAsync(stockanomalyDTO);
        if (response.Succeeded)
        {
            _snackBar.Add($"Anomalie Rejetée", Severity.Error);
            MudDialog.Close();

        }
        else
        {
            _snackBar.Add($"une erreur est survenue ", Severity.Error);
        }

    }
    private async Task CancelAnomaly(int id)
    {
        var response = await anomalyClient.CancelAsync(id);
        if (response.Succeeded)
        {
            _snackBar.Add($"Anomalie Annulée", Severity.Error);
            MudDialog.Close();

        }
        else
        {
            _snackBar.Add($"une erreur est survenue ", Severity.Error);
        }

    }
    
}
